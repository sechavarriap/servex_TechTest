{"version":3,"sources":["components/Spinner.js","components/Control.js","components/Character.js","components/CharacterList.js","components/ErrorAPI.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","className","Control","setCurrentPage","previousPage","nextPage","Container","ButtonGroup","onClick","style","visibility","Button","Character","character","image","name","status","species","location","url","gender","episode","href","Card","Img","src","Title","data-tip","length","substring","trim","Text","CharacterList","characters","loading","map","id","ErrorAPI","alt","App","useState","setCharacters","setNextPage","setPreviousPage","currentPage","setLoading","error","setError","useEffect","request","a","slice","fetch","catch","console","log","response","json","result","ok","visibleCharacters","results","filter","next","info","prev","setTimeout","window","scrollTo","Jumbotron","fluid","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAYeA,EATC,WACZ,OACI,sBAAKC,UAAU,UAAf,UACA,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,uB,gBCsBRC,EA1BC,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,eAAgBC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC/C,OACE,cAACC,EAAA,EAAD,CAAWL,UAAU,iBAArB,SACE,eAACM,EAAA,EAAD,WACE,wBACEN,UAAU,sBACVO,QAAS,WACPL,EAAeC,IAEjBK,MAAO,CAAEC,WAAaN,EAA0B,UAAX,UALvC,wBAUA,cAACO,EAAA,EAAD,CACEV,UAAU,sBACVO,QAAS,kBAAML,EAAeE,IAC9BI,MAAO,CAAEC,WAAaL,EAAsB,UAAX,UAHnC,6B,gBCkBOO,EA/BG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAETC,EAAiED,EAAjEC,MAAOC,EAA0DF,EAA1DE,KAAMC,EAAoDH,EAApDG,OAAQC,EAA4CJ,EAA5CI,QAASC,EAAmCL,EAAnCK,SAAUC,EAAyBN,EAAzBM,IAAKC,EAAoBP,EAApBO,OAAQC,EAAYR,EAAZQ,QAE5D,OACI,sBAAKpB,UAAU,iBAAf,UACI,oBAAGqB,KAAMH,EAAT,UACI,qBAAKlB,UAAS,0BAAqBe,GAAnC,SACI,cAACO,EAAA,EAAKC,IAAN,CAAUC,IAAKX,EAAOb,UAAS,gBAAYe,OAG/C,eAACO,EAAA,EAAKG,MAAN,CACIzB,UAAS,wCAAmCe,GAC5CW,WAAA,UAAcZ,EAAKa,OAAS,GAAKb,EAAO,IAF5C,wBAGMA,EAAKc,UAAU,EAAG,IAAIC,OAH5B,YAGsCf,EAAKa,OAAS,GAAK,MAAQ,OAEjE,cAAC,IAAD,CAAc3B,UAAU,eAG5B,qBAAKA,UAAS,gBAAYe,KAE1B,eAACO,EAAA,EAAKQ,KAAN,CAAW9B,UAAS,sDAAiDe,GAArE,UACI,8BAAG,mBAAGf,UAAU,uBAAhB,IAA2CgB,KAC3C,8BAAG,mBAAGhB,UAAU,qBAAhB,IAAyCiB,EAASH,QAClD,8BAAG,mBAAGd,UAAU,2BAAhB,IAA+CmB,KAC/C,8BAAG,mBAAGnB,UAAU,cAAhB,cAAqCoB,EAAQO,OAA7C,uBCXDI,EAbO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAClC,OACE,cAAC5B,EAAA,EAAD,CACEL,UAAU,aACVQ,MAAO,CAAEC,WAAYwB,EAAU,SAAW,WAF5C,SAIGD,EAAWE,KAAI,SAACtB,GAAD,OACd,cAAC,EAAD,CAA8BA,UAAWA,GAAzBA,EAAUuB,UCEnBC,EAXE,WACb,OACI,eAAC/B,EAAA,EAAD,CACIL,UAAU,kBADd,UAGI,mBAAGA,UAAU,aAAb,iFACA,qBAAKA,UAAU,YAAYwB,IAAI,kEAAkEa,IAAI,cC8ElGC,MA9Ef,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNP,EADM,KACMQ,EADN,OAEmBD,qBAFnB,mBAENnC,EAFM,KAEIqC,EAFJ,OAG2BF,qBAH3B,mBAGNpC,EAHM,KAGQuC,EAHR,OAIyBH,mBAAS,6CAJlC,mBAINI,EAJM,KAIOzC,EAJP,OAKiBqC,oBAAS,GAL1B,mBAKNN,EALM,KAKGW,EALH,OAMaL,oBAAS,GANtB,mBAMNM,EANM,KAMCC,EAND,KAyCb,OAjCAC,qBAAU,WAER,IAAMC,EAAO,uCAAG,sCAAAC,EAAA,6DACR/B,EAAMyB,EAAYO,QADV,SAESC,MAAMjC,GAAKkC,OAAM,SAAAP,GAEtC,OADAQ,QAAQC,IAAIT,GACL,QAJK,cAERU,EAFQ,gBAOOA,EAASC,OAPhB,OAORC,EAPQ,OASVF,EAASG,IACLC,EAAoBF,EAAOG,QAAQC,QAAO,SAAAjD,GAAS,MAAyB,YAArBA,EAAUG,UACjE+C,EAAOL,EAAOM,KAAKD,KACnBE,EAAOP,EAAOM,KAAKC,KAEzBxB,EAAcmB,GACdlB,EAAYqB,GACZpB,EAAgBsB,GAChBC,YAAW,kBAAMrB,GAAW,KAAQ,OAEpCA,GAAW,GACXE,GAAS,IApBG,2CAAH,qDAyBbF,GAAW,GACXsB,OAAOC,SAAS,EAAG,GACnBnB,MAEA,CAACL,IAGD,eAAC,WAAD,WACE,cAACyB,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,eAAChE,EAAA,EAAD,WACE,mBAAGL,UAAU,QAAb,oCACA,oBAAGA,UAAU,cAAb,+DACoD,sBAAMQ,MAAO,CAAC8D,MAAO,eAArB,4BADpD,mBAMJ,cAAC,EAAD,CACEpE,eAAgBA,EAChBC,aAAcA,EACdC,SAAUA,IAGVyC,EAAQ,cAAC,EAAD,IAAe,KAEvBZ,EAAU,cAAC,EAAD,IAAc,KAE1B,cAAC,EAAD,CACEA,QAASA,EACTD,WAAYA,IAGd,cAAC,EAAD,CACE9B,eAAgBA,EAChBC,aAAcA,EACdC,SAAUA,QCnEHmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dad102c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"spinner\">\r\n        <div className=\"double-bounce1\"></div>\r\n        <div className=\"double-bounce2\"></div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Spinner;","import React from \"react\";\r\nimport { Container, ButtonGroup, Button } from \"react-bootstrap\";\r\n\r\nconst Control = ({ setCurrentPage, previousPage, nextPage }) => {\r\n  return (\r\n    <Container className=\"control-button\">\r\n      <ButtonGroup>\r\n        <button\r\n          className=\"btn btn-dark btn-lg\"\r\n          onClick={() => {\r\n            setCurrentPage(previousPage);\r\n          }}\r\n          style={{ visibility: !previousPage ? \"hidden\" : \"visible\" }}\r\n        >\r\n          Prev. page\r\n        </button>\r\n\r\n        <Button\r\n          className=\"btn btn-dark btn-lg\"\r\n          onClick={() => setCurrentPage(nextPage)}\r\n          style={{ visibility: !nextPage ? \"hidden\" : \"visible\" }}\r\n        >\r\n          Next page\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Control;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Character = ({character}) => {\r\n    \r\n    const {image, name, status, species, location, url, gender, episode } = character;\r\n\r\n    return (  \r\n        <div className='card character'> \r\n            <a href={url}>\r\n                <div className={`overlay overlay-${status}`}>\r\n                    <Card.Img src={image} className={ `image-${status}` } />\r\n                </div>\r\n                \r\n                <Card.Title \r\n                    className={`character-name character-name-${status}`} \r\n                    data-tip= {`${name.length > 18 ? name : '' }`}\r\n                > {`${name.substring(0, 18).trim()} ${name.length > 18 ? '...' : '' }`}\r\n                </Card.Title>\r\n                <ReactTooltip className=\"tooltip\"/>\r\n            </a>\r\n\r\n            <div className={ `state-${status}` }></div>\r\n            \r\n            <Card.Text className={`character-description character-description-${status}`}>\r\n                <p><i className=\"fas fa-user-circle\"></i> {species}</p>\r\n                <p><i className=\"fas fa-thumbtack\"></i> {location.name}</p>\r\n                <p><i className=\"fas fa-transgender-alt\"></i> {gender}</p>\r\n                <p><i className=\"fas fa-tv\"></i> {`${episode.length} episodes`}</p>\r\n            </Card.Text>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Character;","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Character from \"./Character\";\r\n\r\n\r\nconst CharacterList = ({characters, loading}) => {\r\n  return (\r\n    <Container\r\n      className=\"characters\"\r\n      style={{ visibility: loading ? \"hidden\" : \"visible\" }}\r\n    >\r\n      {characters.map((character) => (\r\n        <Character key={character.id} character={character} />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CharacterList;\r\n","import { Container } from 'react-bootstrap';\r\nimport '../App.css'\r\n\r\nconst ErrorAPI = () => {\r\n    return ( \r\n        <Container\r\n            className=\"error-container\"\r\n        >\r\n            <p className=\"error-text\">Estamos presentando problemas con el servidor, intenta m√°s tarde</p>\r\n            <img className=\"error-img\" src=\"https://assets.stickpng.com/images/58f37731a4fa116215a92411.png\" alt=\"Error\"/>\r\n        </Container>\r\n    );\r\n}\r\n \r\nexport default ErrorAPI;","import { Container, Jumbotron } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Fragment, useState, useEffect } from \"react\";\nimport Spinner from \"./components/Spinner\"\nimport Control from \"./components/Control\";\nimport CharacterList from \"./components/CharacterList\";\nimport ErrorAPI from \"./components/ErrorAPI\";\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [nextPage, setNextPage] = useState();\n  const [previousPage, setPreviousPage] = useState();\n  const [currentPage, setCurrentPage] = useState('https://rickandmortyapi.com/api/character');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n\n    const request = async () => {\n      const url = currentPage.slice();\n      const response = await fetch(url).catch(error => {\n        console.log(error);\n        return null;\n      });\n\n      const result = await response.json();\n      \n      if (response.ok){\n        const visibleCharacters = result.results.filter(character => character.status !== 'unknown');\n        const next = result.info.next;\n        const prev = result.info.prev;\n  \n        setCharacters(visibleCharacters);\n        setNextPage(next);\n        setPreviousPage(prev);\n        setTimeout(() => setLoading(false), 1000);\n      }else{\n        setLoading(false)\n        setError(true);\n      }\n    }\n\n    \n    setLoading(true);\n    window.scrollTo(0, 0);\n    request()\n    \n  },[currentPage])\n\n  return (\n    <Fragment>      \n      <Jumbotron fluid>\n        <Container>\n          <p className=\"title\">The Rick and Morty API</p>\n          <p className=\"description\">\n            The place to find your prefered characters of the <span style={{color: \"yellowgreen\"}}>Rick and Morty</span> series!\n          </p>\n        </Container>\n      </Jumbotron>\n\n      <Control  \n        setCurrentPage={setCurrentPage}\n        previousPage={previousPage}\n        nextPage={nextPage}\n      />\n\n      { error ? <ErrorAPI /> : null}\n\n      { loading ? <Spinner /> : null }\n\n      <CharacterList \n        loading={loading}\n        characters={characters}\n      />\n\n      <Control  \n        setCurrentPage={setCurrentPage}\n        previousPage={previousPage}\n        nextPage={nextPage}\n      />\n    </Fragment>\n\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}